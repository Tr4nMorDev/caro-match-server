// src/socket/matchmaking.socket.ts
import { Server, Socket } from "socket.io";
import {
  handleMatchmaking,
  tryFindOpponent,
  createMatch,
  isStillWaiting,
  removeUserFromQueue,
  enqueueUser,
} from "../services/matchmaking.service";
import { ClientToServerEvents, SeverToClientEvents } from "../types/express";
import { MatchData } from "../types/express";
import redis from "../lib/redis";

const userSocketMap = new Map<
  number,
  Socket<SeverToClientEvents, ClientToServerEvents>
>(); // userId -> socket

// socket.emit("event", data) G·ª≠i ƒë·∫øn client hi·ªán t·∫°i v√†o h√†m
// socket.emit(..) G·ª≠i s·ª± ki·ªán ƒë·∫øn server
// socket.on() Nghe d·ªØ li·ªáu t·ª´ client
// io.emit("event" , data) G·ª≠i ƒë·∫øn t·∫•t c·∫£ c√°c client ƒëang k·∫øt n·ªëis
// io.to(id).emit() G∆∞i ri√™ng d·ªØ li·ªáu ƒë·∫øn clientclient
export function matchmakingSocket(io: Server) {
  io.on("connection", (socket: Socket) => {
    socket.on("waiting", async (userId: number) => {
      userSocketMap.set(userId, socket);
      await redis.set(`socket:${userId}`, socket.id); // Setup gi√° tr·ªã ƒë·∫ßu cho ng∆∞·ªùi ch∆°i ( ƒë·∫∑t l√†m chu·ªói cho tr·∫≠n ƒë·∫•u l√† id ng∆∞·ªùi ƒë·∫ßu)
      await enqueueUser(userId); // ƒê∆∞a user v√†o h√†ng ƒë·ª£i ch√≠nh th·ª©c
      const opponentId = await tryFindOpponent(userId);
      if (opponentId) {
        const match = await createMatch(userId, opponentId);
        const opponentSocketId = await redis.get(`socket:${opponentId}`);

        const currentSocketId = socket.id;

        // ‚úÖ X√ìA C·∫¢ HAI NG∆Ø·ªúI KH·ªéI H√ÄNG CH·ªú
        await removeUserFromQueue(userId);
        await removeUserFromQueue(opponentId);

        // G·ª≠i t·ªõi c·∫£ hai ng∆∞·ªùi
        io.to(currentSocketId).emit("matched", {
          ...match,
          youAre: match.playerXId === userId ? "X" : "O",
        });
        io.to(opponentSocketId).emit("matched", {
          ...match,
          youAre: match.playerXId === opponentId ? "X" : "O",
        });
      } else {
        setTimeout(async () => {
          const stillWaiting = await isStillWaiting(userId);
          if (stillWaiting) {
            await removeUserFromQueue(userId);
            socket.emit("timeout");
          }
        }, 5000);
      }
    });
    socket.on("cancel_matching", async () => {});
    socket.on("disconnect", async () => {
      console.log(`üîå Disconnected: ${socket.id}`);

      // T√¨m userId t∆∞∆°ng ·ª©ng
      for (const [userId, s] of userSocketMap.entries()) {
        if (s.id === socket.id) {
          console.log(`üßπ Cleaning up for userId: ${userId}`);

          userSocketMap.delete(userId); // 1. X√≥a kh·ªèi memory

          await redis.del(`socket:${userId}`); // 2. X√≥a kh·ªèi Redis
          await removeUserFromQueue(userId); // 3. X√≥a kh·ªèi h√†ng ch·ªù Redis
          break;
        }
      }
    });
  });
}
