
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Game` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Game
 * 
 */
export type GameModel = runtime.Types.Result.DefaultSelection<Prisma.$GamePayload>

export type AggregateGame = {
  _count: GameCountAggregateOutputType | null
  _avg: GameAvgAggregateOutputType | null
  _sum: GameSumAggregateOutputType | null
  _min: GameMinAggregateOutputType | null
  _max: GameMaxAggregateOutputType | null
}

export type GameAvgAggregateOutputType = {
  id: number | null
  matchId: number | null
  xPlayerId: number | null
  oPlayerId: number | null
}

export type GameSumAggregateOutputType = {
  id: number | null
  matchId: number | null
  xPlayerId: number | null
  oPlayerId: number | null
}

export type GameMinAggregateOutputType = {
  id: number | null
  matchId: number | null
  xPlayerId: number | null
  oPlayerId: number | null
  turn: string | null
  status: $Enums.GameStatus | null
  createdAt: Date | null
}

export type GameMaxAggregateOutputType = {
  id: number | null
  matchId: number | null
  xPlayerId: number | null
  oPlayerId: number | null
  turn: string | null
  status: $Enums.GameStatus | null
  createdAt: Date | null
}

export type GameCountAggregateOutputType = {
  id: number
  matchId: number
  xPlayerId: number
  oPlayerId: number
  boardState: number
  turn: number
  status: number
  createdAt: number
  _all: number
}


export type GameAvgAggregateInputType = {
  id?: true
  matchId?: true
  xPlayerId?: true
  oPlayerId?: true
}

export type GameSumAggregateInputType = {
  id?: true
  matchId?: true
  xPlayerId?: true
  oPlayerId?: true
}

export type GameMinAggregateInputType = {
  id?: true
  matchId?: true
  xPlayerId?: true
  oPlayerId?: true
  turn?: true
  status?: true
  createdAt?: true
}

export type GameMaxAggregateInputType = {
  id?: true
  matchId?: true
  xPlayerId?: true
  oPlayerId?: true
  turn?: true
  status?: true
  createdAt?: true
}

export type GameCountAggregateInputType = {
  id?: true
  matchId?: true
  xPlayerId?: true
  oPlayerId?: true
  boardState?: true
  turn?: true
  status?: true
  createdAt?: true
  _all?: true
}

export type GameAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Game to aggregate.
   */
  where?: Prisma.GameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Games to fetch.
   */
  orderBy?: Prisma.GameOrderByWithRelationInput | Prisma.GameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Games
  **/
  _count?: true | GameCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GameAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GameSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GameMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GameMaxAggregateInputType
}

export type GetGameAggregateType<T extends GameAggregateArgs> = {
      [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGame[P]>
    : Prisma.GetScalarType<T[P], AggregateGame[P]>
}




export type GameGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameWhereInput
  orderBy?: Prisma.GameOrderByWithAggregationInput | Prisma.GameOrderByWithAggregationInput[]
  by: Prisma.GameScalarFieldEnum[] | Prisma.GameScalarFieldEnum
  having?: Prisma.GameScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GameCountAggregateInputType | true
  _avg?: GameAvgAggregateInputType
  _sum?: GameSumAggregateInputType
  _min?: GameMinAggregateInputType
  _max?: GameMaxAggregateInputType
}

export type GameGroupByOutputType = {
  id: number
  matchId: number
  xPlayerId: number
  oPlayerId: number
  boardState: runtime.JsonValue
  turn: string
  status: $Enums.GameStatus
  createdAt: Date
  _count: GameCountAggregateOutputType | null
  _avg: GameAvgAggregateOutputType | null
  _sum: GameSumAggregateOutputType | null
  _min: GameMinAggregateOutputType | null
  _max: GameMaxAggregateOutputType | null
}

type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GameGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GameGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GameGroupByOutputType[P]>
      }
    >
  > 



export type GameWhereInput = {
  AND?: Prisma.GameWhereInput | Prisma.GameWhereInput[]
  OR?: Prisma.GameWhereInput[]
  NOT?: Prisma.GameWhereInput | Prisma.GameWhereInput[]
  id?: Prisma.IntFilter<"Game"> | number
  matchId?: Prisma.IntFilter<"Game"> | number
  xPlayerId?: Prisma.IntFilter<"Game"> | number
  oPlayerId?: Prisma.IntFilter<"Game"> | number
  boardState?: Prisma.JsonFilter<"Game">
  turn?: Prisma.StringFilter<"Game"> | string
  status?: Prisma.EnumGameStatusFilter<"Game"> | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFilter<"Game"> | Date | string
  match?: Prisma.XOR<Prisma.MatchScalarRelationFilter, Prisma.MatchWhereInput>
  xPlayer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  oPlayer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type GameOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  matchId?: Prisma.SortOrder
  xPlayerId?: Prisma.SortOrder
  oPlayerId?: Prisma.SortOrder
  boardState?: Prisma.SortOrder
  turn?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  match?: Prisma.MatchOrderByWithRelationInput
  xPlayer?: Prisma.UserOrderByWithRelationInput
  oPlayer?: Prisma.UserOrderByWithRelationInput
}

export type GameWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  matchId?: number
  AND?: Prisma.GameWhereInput | Prisma.GameWhereInput[]
  OR?: Prisma.GameWhereInput[]
  NOT?: Prisma.GameWhereInput | Prisma.GameWhereInput[]
  xPlayerId?: Prisma.IntFilter<"Game"> | number
  oPlayerId?: Prisma.IntFilter<"Game"> | number
  boardState?: Prisma.JsonFilter<"Game">
  turn?: Prisma.StringFilter<"Game"> | string
  status?: Prisma.EnumGameStatusFilter<"Game"> | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFilter<"Game"> | Date | string
  match?: Prisma.XOR<Prisma.MatchScalarRelationFilter, Prisma.MatchWhereInput>
  xPlayer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  oPlayer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "matchId">

export type GameOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  matchId?: Prisma.SortOrder
  xPlayerId?: Prisma.SortOrder
  oPlayerId?: Prisma.SortOrder
  boardState?: Prisma.SortOrder
  turn?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.GameCountOrderByAggregateInput
  _avg?: Prisma.GameAvgOrderByAggregateInput
  _max?: Prisma.GameMaxOrderByAggregateInput
  _min?: Prisma.GameMinOrderByAggregateInput
  _sum?: Prisma.GameSumOrderByAggregateInput
}

export type GameScalarWhereWithAggregatesInput = {
  AND?: Prisma.GameScalarWhereWithAggregatesInput | Prisma.GameScalarWhereWithAggregatesInput[]
  OR?: Prisma.GameScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GameScalarWhereWithAggregatesInput | Prisma.GameScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Game"> | number
  matchId?: Prisma.IntWithAggregatesFilter<"Game"> | number
  xPlayerId?: Prisma.IntWithAggregatesFilter<"Game"> | number
  oPlayerId?: Prisma.IntWithAggregatesFilter<"Game"> | number
  boardState?: Prisma.JsonWithAggregatesFilter<"Game">
  turn?: Prisma.StringWithAggregatesFilter<"Game"> | string
  status?: Prisma.EnumGameStatusWithAggregatesFilter<"Game"> | $Enums.GameStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Game"> | Date | string
}

export type GameCreateInput = {
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: string
  status?: $Enums.GameStatus
  createdAt?: Date | string
  match: Prisma.MatchCreateNestedOneWithoutGameInput
  xPlayer: Prisma.UserCreateNestedOneWithoutGamesAsXInput
  oPlayer: Prisma.UserCreateNestedOneWithoutGamesAsOInput
}

export type GameUncheckedCreateInput = {
  id?: number
  matchId: number
  xPlayerId: number
  oPlayerId: number
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: string
  status?: $Enums.GameStatus
  createdAt?: Date | string
}

export type GameUpdateInput = {
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  match?: Prisma.MatchUpdateOneRequiredWithoutGameNestedInput
  xPlayer?: Prisma.UserUpdateOneRequiredWithoutGamesAsXNestedInput
  oPlayer?: Prisma.UserUpdateOneRequiredWithoutGamesAsONestedInput
}

export type GameUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  matchId?: Prisma.IntFieldUpdateOperationsInput | number
  xPlayerId?: Prisma.IntFieldUpdateOperationsInput | number
  oPlayerId?: Prisma.IntFieldUpdateOperationsInput | number
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameCreateManyInput = {
  id?: number
  matchId: number
  xPlayerId: number
  oPlayerId: number
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: string
  status?: $Enums.GameStatus
  createdAt?: Date | string
}

export type GameUpdateManyMutationInput = {
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  matchId?: Prisma.IntFieldUpdateOperationsInput | number
  xPlayerId?: Prisma.IntFieldUpdateOperationsInput | number
  oPlayerId?: Prisma.IntFieldUpdateOperationsInput | number
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameListRelationFilter = {
  every?: Prisma.GameWhereInput
  some?: Prisma.GameWhereInput
  none?: Prisma.GameWhereInput
}

export type GameOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GameNullableScalarRelationFilter = {
  is?: Prisma.GameWhereInput | null
  isNot?: Prisma.GameWhereInput | null
}

export type GameCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  matchId?: Prisma.SortOrder
  xPlayerId?: Prisma.SortOrder
  oPlayerId?: Prisma.SortOrder
  boardState?: Prisma.SortOrder
  turn?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type GameAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  matchId?: Prisma.SortOrder
  xPlayerId?: Prisma.SortOrder
  oPlayerId?: Prisma.SortOrder
}

export type GameMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  matchId?: Prisma.SortOrder
  xPlayerId?: Prisma.SortOrder
  oPlayerId?: Prisma.SortOrder
  turn?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type GameMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  matchId?: Prisma.SortOrder
  xPlayerId?: Prisma.SortOrder
  oPlayerId?: Prisma.SortOrder
  turn?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type GameSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  matchId?: Prisma.SortOrder
  xPlayerId?: Prisma.SortOrder
  oPlayerId?: Prisma.SortOrder
}

export type GameCreateNestedManyWithoutXPlayerInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutXPlayerInput, Prisma.GameUncheckedCreateWithoutXPlayerInput> | Prisma.GameCreateWithoutXPlayerInput[] | Prisma.GameUncheckedCreateWithoutXPlayerInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutXPlayerInput | Prisma.GameCreateOrConnectWithoutXPlayerInput[]
  createMany?: Prisma.GameCreateManyXPlayerInputEnvelope
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
}

export type GameCreateNestedManyWithoutOPlayerInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutOPlayerInput, Prisma.GameUncheckedCreateWithoutOPlayerInput> | Prisma.GameCreateWithoutOPlayerInput[] | Prisma.GameUncheckedCreateWithoutOPlayerInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutOPlayerInput | Prisma.GameCreateOrConnectWithoutOPlayerInput[]
  createMany?: Prisma.GameCreateManyOPlayerInputEnvelope
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
}

export type GameUncheckedCreateNestedManyWithoutXPlayerInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutXPlayerInput, Prisma.GameUncheckedCreateWithoutXPlayerInput> | Prisma.GameCreateWithoutXPlayerInput[] | Prisma.GameUncheckedCreateWithoutXPlayerInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutXPlayerInput | Prisma.GameCreateOrConnectWithoutXPlayerInput[]
  createMany?: Prisma.GameCreateManyXPlayerInputEnvelope
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
}

export type GameUncheckedCreateNestedManyWithoutOPlayerInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutOPlayerInput, Prisma.GameUncheckedCreateWithoutOPlayerInput> | Prisma.GameCreateWithoutOPlayerInput[] | Prisma.GameUncheckedCreateWithoutOPlayerInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutOPlayerInput | Prisma.GameCreateOrConnectWithoutOPlayerInput[]
  createMany?: Prisma.GameCreateManyOPlayerInputEnvelope
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
}

export type GameUpdateManyWithoutXPlayerNestedInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutXPlayerInput, Prisma.GameUncheckedCreateWithoutXPlayerInput> | Prisma.GameCreateWithoutXPlayerInput[] | Prisma.GameUncheckedCreateWithoutXPlayerInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutXPlayerInput | Prisma.GameCreateOrConnectWithoutXPlayerInput[]
  upsert?: Prisma.GameUpsertWithWhereUniqueWithoutXPlayerInput | Prisma.GameUpsertWithWhereUniqueWithoutXPlayerInput[]
  createMany?: Prisma.GameCreateManyXPlayerInputEnvelope
  set?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  disconnect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  delete?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  update?: Prisma.GameUpdateWithWhereUniqueWithoutXPlayerInput | Prisma.GameUpdateWithWhereUniqueWithoutXPlayerInput[]
  updateMany?: Prisma.GameUpdateManyWithWhereWithoutXPlayerInput | Prisma.GameUpdateManyWithWhereWithoutXPlayerInput[]
  deleteMany?: Prisma.GameScalarWhereInput | Prisma.GameScalarWhereInput[]
}

export type GameUpdateManyWithoutOPlayerNestedInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutOPlayerInput, Prisma.GameUncheckedCreateWithoutOPlayerInput> | Prisma.GameCreateWithoutOPlayerInput[] | Prisma.GameUncheckedCreateWithoutOPlayerInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutOPlayerInput | Prisma.GameCreateOrConnectWithoutOPlayerInput[]
  upsert?: Prisma.GameUpsertWithWhereUniqueWithoutOPlayerInput | Prisma.GameUpsertWithWhereUniqueWithoutOPlayerInput[]
  createMany?: Prisma.GameCreateManyOPlayerInputEnvelope
  set?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  disconnect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  delete?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  update?: Prisma.GameUpdateWithWhereUniqueWithoutOPlayerInput | Prisma.GameUpdateWithWhereUniqueWithoutOPlayerInput[]
  updateMany?: Prisma.GameUpdateManyWithWhereWithoutOPlayerInput | Prisma.GameUpdateManyWithWhereWithoutOPlayerInput[]
  deleteMany?: Prisma.GameScalarWhereInput | Prisma.GameScalarWhereInput[]
}

export type GameUncheckedUpdateManyWithoutXPlayerNestedInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutXPlayerInput, Prisma.GameUncheckedCreateWithoutXPlayerInput> | Prisma.GameCreateWithoutXPlayerInput[] | Prisma.GameUncheckedCreateWithoutXPlayerInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutXPlayerInput | Prisma.GameCreateOrConnectWithoutXPlayerInput[]
  upsert?: Prisma.GameUpsertWithWhereUniqueWithoutXPlayerInput | Prisma.GameUpsertWithWhereUniqueWithoutXPlayerInput[]
  createMany?: Prisma.GameCreateManyXPlayerInputEnvelope
  set?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  disconnect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  delete?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  update?: Prisma.GameUpdateWithWhereUniqueWithoutXPlayerInput | Prisma.GameUpdateWithWhereUniqueWithoutXPlayerInput[]
  updateMany?: Prisma.GameUpdateManyWithWhereWithoutXPlayerInput | Prisma.GameUpdateManyWithWhereWithoutXPlayerInput[]
  deleteMany?: Prisma.GameScalarWhereInput | Prisma.GameScalarWhereInput[]
}

export type GameUncheckedUpdateManyWithoutOPlayerNestedInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutOPlayerInput, Prisma.GameUncheckedCreateWithoutOPlayerInput> | Prisma.GameCreateWithoutOPlayerInput[] | Prisma.GameUncheckedCreateWithoutOPlayerInput[]
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutOPlayerInput | Prisma.GameCreateOrConnectWithoutOPlayerInput[]
  upsert?: Prisma.GameUpsertWithWhereUniqueWithoutOPlayerInput | Prisma.GameUpsertWithWhereUniqueWithoutOPlayerInput[]
  createMany?: Prisma.GameCreateManyOPlayerInputEnvelope
  set?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  disconnect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  delete?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  connect?: Prisma.GameWhereUniqueInput | Prisma.GameWhereUniqueInput[]
  update?: Prisma.GameUpdateWithWhereUniqueWithoutOPlayerInput | Prisma.GameUpdateWithWhereUniqueWithoutOPlayerInput[]
  updateMany?: Prisma.GameUpdateManyWithWhereWithoutOPlayerInput | Prisma.GameUpdateManyWithWhereWithoutOPlayerInput[]
  deleteMany?: Prisma.GameScalarWhereInput | Prisma.GameScalarWhereInput[]
}

export type GameCreateNestedOneWithoutMatchInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutMatchInput, Prisma.GameUncheckedCreateWithoutMatchInput>
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutMatchInput
  connect?: Prisma.GameWhereUniqueInput
}

export type GameUncheckedCreateNestedOneWithoutMatchInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutMatchInput, Prisma.GameUncheckedCreateWithoutMatchInput>
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutMatchInput
  connect?: Prisma.GameWhereUniqueInput
}

export type GameUpdateOneWithoutMatchNestedInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutMatchInput, Prisma.GameUncheckedCreateWithoutMatchInput>
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutMatchInput
  upsert?: Prisma.GameUpsertWithoutMatchInput
  disconnect?: Prisma.GameWhereInput | boolean
  delete?: Prisma.GameWhereInput | boolean
  connect?: Prisma.GameWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GameUpdateToOneWithWhereWithoutMatchInput, Prisma.GameUpdateWithoutMatchInput>, Prisma.GameUncheckedUpdateWithoutMatchInput>
}

export type GameUncheckedUpdateOneWithoutMatchNestedInput = {
  create?: Prisma.XOR<Prisma.GameCreateWithoutMatchInput, Prisma.GameUncheckedCreateWithoutMatchInput>
  connectOrCreate?: Prisma.GameCreateOrConnectWithoutMatchInput
  upsert?: Prisma.GameUpsertWithoutMatchInput
  disconnect?: Prisma.GameWhereInput | boolean
  delete?: Prisma.GameWhereInput | boolean
  connect?: Prisma.GameWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GameUpdateToOneWithWhereWithoutMatchInput, Prisma.GameUpdateWithoutMatchInput>, Prisma.GameUncheckedUpdateWithoutMatchInput>
}

export type EnumGameStatusFieldUpdateOperationsInput = {
  set?: $Enums.GameStatus
}

export type GameCreateWithoutXPlayerInput = {
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: string
  status?: $Enums.GameStatus
  createdAt?: Date | string
  match: Prisma.MatchCreateNestedOneWithoutGameInput
  oPlayer: Prisma.UserCreateNestedOneWithoutGamesAsOInput
}

export type GameUncheckedCreateWithoutXPlayerInput = {
  id?: number
  matchId: number
  oPlayerId: number
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: string
  status?: $Enums.GameStatus
  createdAt?: Date | string
}

export type GameCreateOrConnectWithoutXPlayerInput = {
  where: Prisma.GameWhereUniqueInput
  create: Prisma.XOR<Prisma.GameCreateWithoutXPlayerInput, Prisma.GameUncheckedCreateWithoutXPlayerInput>
}

export type GameCreateManyXPlayerInputEnvelope = {
  data: Prisma.GameCreateManyXPlayerInput | Prisma.GameCreateManyXPlayerInput[]
  skipDuplicates?: boolean
}

export type GameCreateWithoutOPlayerInput = {
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: string
  status?: $Enums.GameStatus
  createdAt?: Date | string
  match: Prisma.MatchCreateNestedOneWithoutGameInput
  xPlayer: Prisma.UserCreateNestedOneWithoutGamesAsXInput
}

export type GameUncheckedCreateWithoutOPlayerInput = {
  id?: number
  matchId: number
  xPlayerId: number
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: string
  status?: $Enums.GameStatus
  createdAt?: Date | string
}

export type GameCreateOrConnectWithoutOPlayerInput = {
  where: Prisma.GameWhereUniqueInput
  create: Prisma.XOR<Prisma.GameCreateWithoutOPlayerInput, Prisma.GameUncheckedCreateWithoutOPlayerInput>
}

export type GameCreateManyOPlayerInputEnvelope = {
  data: Prisma.GameCreateManyOPlayerInput | Prisma.GameCreateManyOPlayerInput[]
  skipDuplicates?: boolean
}

export type GameUpsertWithWhereUniqueWithoutXPlayerInput = {
  where: Prisma.GameWhereUniqueInput
  update: Prisma.XOR<Prisma.GameUpdateWithoutXPlayerInput, Prisma.GameUncheckedUpdateWithoutXPlayerInput>
  create: Prisma.XOR<Prisma.GameCreateWithoutXPlayerInput, Prisma.GameUncheckedCreateWithoutXPlayerInput>
}

export type GameUpdateWithWhereUniqueWithoutXPlayerInput = {
  where: Prisma.GameWhereUniqueInput
  data: Prisma.XOR<Prisma.GameUpdateWithoutXPlayerInput, Prisma.GameUncheckedUpdateWithoutXPlayerInput>
}

export type GameUpdateManyWithWhereWithoutXPlayerInput = {
  where: Prisma.GameScalarWhereInput
  data: Prisma.XOR<Prisma.GameUpdateManyMutationInput, Prisma.GameUncheckedUpdateManyWithoutXPlayerInput>
}

export type GameScalarWhereInput = {
  AND?: Prisma.GameScalarWhereInput | Prisma.GameScalarWhereInput[]
  OR?: Prisma.GameScalarWhereInput[]
  NOT?: Prisma.GameScalarWhereInput | Prisma.GameScalarWhereInput[]
  id?: Prisma.IntFilter<"Game"> | number
  matchId?: Prisma.IntFilter<"Game"> | number
  xPlayerId?: Prisma.IntFilter<"Game"> | number
  oPlayerId?: Prisma.IntFilter<"Game"> | number
  boardState?: Prisma.JsonFilter<"Game">
  turn?: Prisma.StringFilter<"Game"> | string
  status?: Prisma.EnumGameStatusFilter<"Game"> | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFilter<"Game"> | Date | string
}

export type GameUpsertWithWhereUniqueWithoutOPlayerInput = {
  where: Prisma.GameWhereUniqueInput
  update: Prisma.XOR<Prisma.GameUpdateWithoutOPlayerInput, Prisma.GameUncheckedUpdateWithoutOPlayerInput>
  create: Prisma.XOR<Prisma.GameCreateWithoutOPlayerInput, Prisma.GameUncheckedCreateWithoutOPlayerInput>
}

export type GameUpdateWithWhereUniqueWithoutOPlayerInput = {
  where: Prisma.GameWhereUniqueInput
  data: Prisma.XOR<Prisma.GameUpdateWithoutOPlayerInput, Prisma.GameUncheckedUpdateWithoutOPlayerInput>
}

export type GameUpdateManyWithWhereWithoutOPlayerInput = {
  where: Prisma.GameScalarWhereInput
  data: Prisma.XOR<Prisma.GameUpdateManyMutationInput, Prisma.GameUncheckedUpdateManyWithoutOPlayerInput>
}

export type GameCreateWithoutMatchInput = {
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: string
  status?: $Enums.GameStatus
  createdAt?: Date | string
  xPlayer: Prisma.UserCreateNestedOneWithoutGamesAsXInput
  oPlayer: Prisma.UserCreateNestedOneWithoutGamesAsOInput
}

export type GameUncheckedCreateWithoutMatchInput = {
  id?: number
  xPlayerId: number
  oPlayerId: number
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: string
  status?: $Enums.GameStatus
  createdAt?: Date | string
}

export type GameCreateOrConnectWithoutMatchInput = {
  where: Prisma.GameWhereUniqueInput
  create: Prisma.XOR<Prisma.GameCreateWithoutMatchInput, Prisma.GameUncheckedCreateWithoutMatchInput>
}

export type GameUpsertWithoutMatchInput = {
  update: Prisma.XOR<Prisma.GameUpdateWithoutMatchInput, Prisma.GameUncheckedUpdateWithoutMatchInput>
  create: Prisma.XOR<Prisma.GameCreateWithoutMatchInput, Prisma.GameUncheckedCreateWithoutMatchInput>
  where?: Prisma.GameWhereInput
}

export type GameUpdateToOneWithWhereWithoutMatchInput = {
  where?: Prisma.GameWhereInput
  data: Prisma.XOR<Prisma.GameUpdateWithoutMatchInput, Prisma.GameUncheckedUpdateWithoutMatchInput>
}

export type GameUpdateWithoutMatchInput = {
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  xPlayer?: Prisma.UserUpdateOneRequiredWithoutGamesAsXNestedInput
  oPlayer?: Prisma.UserUpdateOneRequiredWithoutGamesAsONestedInput
}

export type GameUncheckedUpdateWithoutMatchInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  xPlayerId?: Prisma.IntFieldUpdateOperationsInput | number
  oPlayerId?: Prisma.IntFieldUpdateOperationsInput | number
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameCreateManyXPlayerInput = {
  id?: number
  matchId: number
  oPlayerId: number
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: string
  status?: $Enums.GameStatus
  createdAt?: Date | string
}

export type GameCreateManyOPlayerInput = {
  id?: number
  matchId: number
  xPlayerId: number
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: string
  status?: $Enums.GameStatus
  createdAt?: Date | string
}

export type GameUpdateWithoutXPlayerInput = {
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  match?: Prisma.MatchUpdateOneRequiredWithoutGameNestedInput
  oPlayer?: Prisma.UserUpdateOneRequiredWithoutGamesAsONestedInput
}

export type GameUncheckedUpdateWithoutXPlayerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  matchId?: Prisma.IntFieldUpdateOperationsInput | number
  oPlayerId?: Prisma.IntFieldUpdateOperationsInput | number
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameUncheckedUpdateManyWithoutXPlayerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  matchId?: Prisma.IntFieldUpdateOperationsInput | number
  oPlayerId?: Prisma.IntFieldUpdateOperationsInput | number
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameUpdateWithoutOPlayerInput = {
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  match?: Prisma.MatchUpdateOneRequiredWithoutGameNestedInput
  xPlayer?: Prisma.UserUpdateOneRequiredWithoutGamesAsXNestedInput
}

export type GameUncheckedUpdateWithoutOPlayerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  matchId?: Prisma.IntFieldUpdateOperationsInput | number
  xPlayerId?: Prisma.IntFieldUpdateOperationsInput | number
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GameUncheckedUpdateManyWithoutOPlayerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  matchId?: Prisma.IntFieldUpdateOperationsInput | number
  xPlayerId?: Prisma.IntFieldUpdateOperationsInput | number
  boardState?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  turn?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type GameSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  matchId?: boolean
  xPlayerId?: boolean
  oPlayerId?: boolean
  boardState?: boolean
  turn?: boolean
  status?: boolean
  createdAt?: boolean
  match?: boolean | Prisma.MatchDefaultArgs<ExtArgs>
  xPlayer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  oPlayer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["game"]>

export type GameSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  matchId?: boolean
  xPlayerId?: boolean
  oPlayerId?: boolean
  boardState?: boolean
  turn?: boolean
  status?: boolean
  createdAt?: boolean
  match?: boolean | Prisma.MatchDefaultArgs<ExtArgs>
  xPlayer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  oPlayer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["game"]>

export type GameSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  matchId?: boolean
  xPlayerId?: boolean
  oPlayerId?: boolean
  boardState?: boolean
  turn?: boolean
  status?: boolean
  createdAt?: boolean
  match?: boolean | Prisma.MatchDefaultArgs<ExtArgs>
  xPlayer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  oPlayer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["game"]>

export type GameSelectScalar = {
  id?: boolean
  matchId?: boolean
  xPlayerId?: boolean
  oPlayerId?: boolean
  boardState?: boolean
  turn?: boolean
  status?: boolean
  createdAt?: boolean
}

export type GameOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "matchId" | "xPlayerId" | "oPlayerId" | "boardState" | "turn" | "status" | "createdAt", ExtArgs["result"]["game"]>
export type GameInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  match?: boolean | Prisma.MatchDefaultArgs<ExtArgs>
  xPlayer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  oPlayer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type GameIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  match?: boolean | Prisma.MatchDefaultArgs<ExtArgs>
  xPlayer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  oPlayer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type GameIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  match?: boolean | Prisma.MatchDefaultArgs<ExtArgs>
  xPlayer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  oPlayer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $GamePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Game"
  objects: {
    match: Prisma.$MatchPayload<ExtArgs>
    xPlayer: Prisma.$UserPayload<ExtArgs>
    oPlayer: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    matchId: number
    xPlayerId: number
    oPlayerId: number
    boardState: runtime.JsonValue
    turn: string
    status: $Enums.GameStatus
    createdAt: Date
  }, ExtArgs["result"]["game"]>
  composites: {}
}

export type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GamePayload, S>

export type GameCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GameCountAggregateInputType | true
  }

export interface GameDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
  /**
   * Find zero or one Game that matches the filter.
   * @param {GameFindUniqueArgs} args - Arguments to find a Game
   * @example
   * // Get one Game
   * const game = await prisma.game.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GameFindUniqueArgs>(args: Prisma.SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Game that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
   * @example
   * // Get one Game
   * const game = await prisma.game.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Game that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameFindFirstArgs} args - Arguments to find a Game
   * @example
   * // Get one Game
   * const game = await prisma.game.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GameFindFirstArgs>(args?: Prisma.SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Game that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
   * @example
   * // Get one Game
   * const game = await prisma.game.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Games that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Games
   * const games = await prisma.game.findMany()
   * 
   * // Get first 10 Games
   * const games = await prisma.game.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GameFindManyArgs>(args?: Prisma.SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Game.
   * @param {GameCreateArgs} args - Arguments to create a Game.
   * @example
   * // Create one Game
   * const Game = await prisma.game.create({
   *   data: {
   *     // ... data to create a Game
   *   }
   * })
   * 
   */
  create<T extends GameCreateArgs>(args: Prisma.SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Games.
   * @param {GameCreateManyArgs} args - Arguments to create many Games.
   * @example
   * // Create many Games
   * const game = await prisma.game.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GameCreateManyArgs>(args?: Prisma.SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Games and returns the data saved in the database.
   * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
   * @example
   * // Create many Games
   * const game = await prisma.game.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Games and only return the `id`
   * const gameWithIdOnly = await prisma.game.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Game.
   * @param {GameDeleteArgs} args - Arguments to delete one Game.
   * @example
   * // Delete one Game
   * const Game = await prisma.game.delete({
   *   where: {
   *     // ... filter to delete one Game
   *   }
   * })
   * 
   */
  delete<T extends GameDeleteArgs>(args: Prisma.SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Game.
   * @param {GameUpdateArgs} args - Arguments to update one Game.
   * @example
   * // Update one Game
   * const game = await prisma.game.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GameUpdateArgs>(args: Prisma.SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Games.
   * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
   * @example
   * // Delete a few Games
   * const { count } = await prisma.game.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GameDeleteManyArgs>(args?: Prisma.SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Games.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Games
   * const game = await prisma.game.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GameUpdateManyArgs>(args: Prisma.SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Games and returns the data updated in the database.
   * @param {GameUpdateManyAndReturnArgs} args - Arguments to update many Games.
   * @example
   * // Update many Games
   * const game = await prisma.game.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Games and only return the `id`
   * const gameWithIdOnly = await prisma.game.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GameUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Game.
   * @param {GameUpsertArgs} args - Arguments to update or create a Game.
   * @example
   * // Update or create a Game
   * const game = await prisma.game.upsert({
   *   create: {
   *     // ... data to create a Game
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Game we want to update
   *   }
   * })
   */
  upsert<T extends GameUpsertArgs>(args: Prisma.SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Games.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameCountArgs} args - Arguments to filter Games to count.
   * @example
   * // Count the number of Games
   * const count = await prisma.game.count({
   *   where: {
   *     // ... the filter for the Games we want to count
   *   }
   * })
  **/
  count<T extends GameCountArgs>(
    args?: Prisma.Subset<T, GameCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GameCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Game.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GameAggregateArgs>(args: Prisma.Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

  /**
   * Group by Game.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GameGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GameGroupByArgs['orderBy'] }
      : { orderBy?: GameGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Game model
 */
readonly fields: GameFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Game.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GameClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  match<T extends Prisma.MatchDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MatchDefaultArgs<ExtArgs>>): Prisma.Prisma__MatchClient<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  xPlayer<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  oPlayer<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Game model
 */
export interface GameFieldRefs {
  readonly id: Prisma.FieldRef<"Game", 'Int'>
  readonly matchId: Prisma.FieldRef<"Game", 'Int'>
  readonly xPlayerId: Prisma.FieldRef<"Game", 'Int'>
  readonly oPlayerId: Prisma.FieldRef<"Game", 'Int'>
  readonly boardState: Prisma.FieldRef<"Game", 'Json'>
  readonly turn: Prisma.FieldRef<"Game", 'String'>
  readonly status: Prisma.FieldRef<"Game", 'GameStatus'>
  readonly createdAt: Prisma.FieldRef<"Game", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Game findUnique
 */
export type GameFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * Filter, which Game to fetch.
   */
  where: Prisma.GameWhereUniqueInput
}

/**
 * Game findUniqueOrThrow
 */
export type GameFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * Filter, which Game to fetch.
   */
  where: Prisma.GameWhereUniqueInput
}

/**
 * Game findFirst
 */
export type GameFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * Filter, which Game to fetch.
   */
  where?: Prisma.GameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Games to fetch.
   */
  orderBy?: Prisma.GameOrderByWithRelationInput | Prisma.GameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Games.
   */
  cursor?: Prisma.GameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Games.
   */
  distinct?: Prisma.GameScalarFieldEnum | Prisma.GameScalarFieldEnum[]
}

/**
 * Game findFirstOrThrow
 */
export type GameFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * Filter, which Game to fetch.
   */
  where?: Prisma.GameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Games to fetch.
   */
  orderBy?: Prisma.GameOrderByWithRelationInput | Prisma.GameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Games.
   */
  cursor?: Prisma.GameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Games.
   */
  distinct?: Prisma.GameScalarFieldEnum | Prisma.GameScalarFieldEnum[]
}

/**
 * Game findMany
 */
export type GameFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * Filter, which Games to fetch.
   */
  where?: Prisma.GameWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Games to fetch.
   */
  orderBy?: Prisma.GameOrderByWithRelationInput | Prisma.GameOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Games.
   */
  cursor?: Prisma.GameWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Games.
   */
  skip?: number
  distinct?: Prisma.GameScalarFieldEnum | Prisma.GameScalarFieldEnum[]
}

/**
 * Game create
 */
export type GameCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * The data needed to create a Game.
   */
  data: Prisma.XOR<Prisma.GameCreateInput, Prisma.GameUncheckedCreateInput>
}

/**
 * Game createMany
 */
export type GameCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Games.
   */
  data: Prisma.GameCreateManyInput | Prisma.GameCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Game createManyAndReturn
 */
export type GameCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * The data used to create many Games.
   */
  data: Prisma.GameCreateManyInput | Prisma.GameCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Game update
 */
export type GameUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * The data needed to update a Game.
   */
  data: Prisma.XOR<Prisma.GameUpdateInput, Prisma.GameUncheckedUpdateInput>
  /**
   * Choose, which Game to update.
   */
  where: Prisma.GameWhereUniqueInput
}

/**
 * Game updateMany
 */
export type GameUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Games.
   */
  data: Prisma.XOR<Prisma.GameUpdateManyMutationInput, Prisma.GameUncheckedUpdateManyInput>
  /**
   * Filter which Games to update
   */
  where?: Prisma.GameWhereInput
  /**
   * Limit how many Games to update.
   */
  limit?: number
}

/**
 * Game updateManyAndReturn
 */
export type GameUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * The data used to update Games.
   */
  data: Prisma.XOR<Prisma.GameUpdateManyMutationInput, Prisma.GameUncheckedUpdateManyInput>
  /**
   * Filter which Games to update
   */
  where?: Prisma.GameWhereInput
  /**
   * Limit how many Games to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Game upsert
 */
export type GameUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * The filter to search for the Game to update in case it exists.
   */
  where: Prisma.GameWhereUniqueInput
  /**
   * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
   */
  create: Prisma.XOR<Prisma.GameCreateInput, Prisma.GameUncheckedCreateInput>
  /**
   * In case the Game was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GameUpdateInput, Prisma.GameUncheckedUpdateInput>
}

/**
 * Game delete
 */
export type GameDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  /**
   * Filter which Game to delete.
   */
  where: Prisma.GameWhereUniqueInput
}

/**
 * Game deleteMany
 */
export type GameDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Games to delete
   */
  where?: Prisma.GameWhereInput
  /**
   * Limit how many Games to delete.
   */
  limit?: number
}

/**
 * Game without action
 */
export type GameDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
}
