
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Match` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Match
 * 
 */
export type MatchModel = runtime.Types.Result.DefaultSelection<Prisma.$MatchPayload>

export type AggregateMatch = {
  _count: MatchCountAggregateOutputType | null
  _avg: MatchAvgAggregateOutputType | null
  _sum: MatchSumAggregateOutputType | null
  _min: MatchMinAggregateOutputType | null
  _max: MatchMaxAggregateOutputType | null
}

export type MatchAvgAggregateOutputType = {
  id: number | null
  player1Id: number | null
  player2Id: number | null
}

export type MatchSumAggregateOutputType = {
  id: number | null
  player1Id: number | null
  player2Id: number | null
}

export type MatchMinAggregateOutputType = {
  id: number | null
  player1Id: number | null
  player2Id: number | null
  matchedAt: Date | null
  status: $Enums.MatchStatus | null
}

export type MatchMaxAggregateOutputType = {
  id: number | null
  player1Id: number | null
  player2Id: number | null
  matchedAt: Date | null
  status: $Enums.MatchStatus | null
}

export type MatchCountAggregateOutputType = {
  id: number
  player1Id: number
  player2Id: number
  matchedAt: number
  status: number
  _all: number
}


export type MatchAvgAggregateInputType = {
  id?: true
  player1Id?: true
  player2Id?: true
}

export type MatchSumAggregateInputType = {
  id?: true
  player1Id?: true
  player2Id?: true
}

export type MatchMinAggregateInputType = {
  id?: true
  player1Id?: true
  player2Id?: true
  matchedAt?: true
  status?: true
}

export type MatchMaxAggregateInputType = {
  id?: true
  player1Id?: true
  player2Id?: true
  matchedAt?: true
  status?: true
}

export type MatchCountAggregateInputType = {
  id?: true
  player1Id?: true
  player2Id?: true
  matchedAt?: true
  status?: true
  _all?: true
}

export type MatchAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Match to aggregate.
   */
  where?: Prisma.MatchWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Matches to fetch.
   */
  orderBy?: Prisma.MatchOrderByWithRelationInput | Prisma.MatchOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MatchWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Matches from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Matches.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Matches
  **/
  _count?: true | MatchCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MatchAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MatchSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MatchMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MatchMaxAggregateInputType
}

export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
      [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMatch[P]>
    : Prisma.GetScalarType<T[P], AggregateMatch[P]>
}




export type MatchGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MatchWhereInput
  orderBy?: Prisma.MatchOrderByWithAggregationInput | Prisma.MatchOrderByWithAggregationInput[]
  by: Prisma.MatchScalarFieldEnum[] | Prisma.MatchScalarFieldEnum
  having?: Prisma.MatchScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MatchCountAggregateInputType | true
  _avg?: MatchAvgAggregateInputType
  _sum?: MatchSumAggregateInputType
  _min?: MatchMinAggregateInputType
  _max?: MatchMaxAggregateInputType
}

export type MatchGroupByOutputType = {
  id: number
  player1Id: number
  player2Id: number
  matchedAt: Date
  status: $Enums.MatchStatus
  _count: MatchCountAggregateOutputType | null
  _avg: MatchAvgAggregateOutputType | null
  _sum: MatchSumAggregateOutputType | null
  _min: MatchMinAggregateOutputType | null
  _max: MatchMaxAggregateOutputType | null
}

type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MatchGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MatchGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MatchGroupByOutputType[P]>
      }
    >
  > 



export type MatchWhereInput = {
  AND?: Prisma.MatchWhereInput | Prisma.MatchWhereInput[]
  OR?: Prisma.MatchWhereInput[]
  NOT?: Prisma.MatchWhereInput | Prisma.MatchWhereInput[]
  id?: Prisma.IntFilter<"Match"> | number
  player1Id?: Prisma.IntFilter<"Match"> | number
  player2Id?: Prisma.IntFilter<"Match"> | number
  matchedAt?: Prisma.DateTimeFilter<"Match"> | Date | string
  status?: Prisma.EnumMatchStatusFilter<"Match"> | $Enums.MatchStatus
  player1?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  player2?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  game?: Prisma.XOR<Prisma.GameNullableScalarRelationFilter, Prisma.GameWhereInput> | null
}

export type MatchOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  player1Id?: Prisma.SortOrder
  player2Id?: Prisma.SortOrder
  matchedAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
  player1?: Prisma.UserOrderByWithRelationInput
  player2?: Prisma.UserOrderByWithRelationInput
  game?: Prisma.GameOrderByWithRelationInput
}

export type MatchWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.MatchWhereInput | Prisma.MatchWhereInput[]
  OR?: Prisma.MatchWhereInput[]
  NOT?: Prisma.MatchWhereInput | Prisma.MatchWhereInput[]
  player1Id?: Prisma.IntFilter<"Match"> | number
  player2Id?: Prisma.IntFilter<"Match"> | number
  matchedAt?: Prisma.DateTimeFilter<"Match"> | Date | string
  status?: Prisma.EnumMatchStatusFilter<"Match"> | $Enums.MatchStatus
  player1?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  player2?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  game?: Prisma.XOR<Prisma.GameNullableScalarRelationFilter, Prisma.GameWhereInput> | null
}, "id">

export type MatchOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  player1Id?: Prisma.SortOrder
  player2Id?: Prisma.SortOrder
  matchedAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
  _count?: Prisma.MatchCountOrderByAggregateInput
  _avg?: Prisma.MatchAvgOrderByAggregateInput
  _max?: Prisma.MatchMaxOrderByAggregateInput
  _min?: Prisma.MatchMinOrderByAggregateInput
  _sum?: Prisma.MatchSumOrderByAggregateInput
}

export type MatchScalarWhereWithAggregatesInput = {
  AND?: Prisma.MatchScalarWhereWithAggregatesInput | Prisma.MatchScalarWhereWithAggregatesInput[]
  OR?: Prisma.MatchScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MatchScalarWhereWithAggregatesInput | Prisma.MatchScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Match"> | number
  player1Id?: Prisma.IntWithAggregatesFilter<"Match"> | number
  player2Id?: Prisma.IntWithAggregatesFilter<"Match"> | number
  matchedAt?: Prisma.DateTimeWithAggregatesFilter<"Match"> | Date | string
  status?: Prisma.EnumMatchStatusWithAggregatesFilter<"Match"> | $Enums.MatchStatus
}

export type MatchCreateInput = {
  matchedAt?: Date | string
  status?: $Enums.MatchStatus
  player1: Prisma.UserCreateNestedOneWithoutMatches1Input
  player2: Prisma.UserCreateNestedOneWithoutMatches2Input
  game?: Prisma.GameCreateNestedOneWithoutMatchInput
}

export type MatchUncheckedCreateInput = {
  id?: number
  player1Id: number
  player2Id: number
  matchedAt?: Date | string
  status?: $Enums.MatchStatus
  game?: Prisma.GameUncheckedCreateNestedOneWithoutMatchInput
}

export type MatchUpdateInput = {
  matchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMatchStatusFieldUpdateOperationsInput | $Enums.MatchStatus
  player1?: Prisma.UserUpdateOneRequiredWithoutMatches1NestedInput
  player2?: Prisma.UserUpdateOneRequiredWithoutMatches2NestedInput
  game?: Prisma.GameUpdateOneWithoutMatchNestedInput
}

export type MatchUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  player1Id?: Prisma.IntFieldUpdateOperationsInput | number
  player2Id?: Prisma.IntFieldUpdateOperationsInput | number
  matchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMatchStatusFieldUpdateOperationsInput | $Enums.MatchStatus
  game?: Prisma.GameUncheckedUpdateOneWithoutMatchNestedInput
}

export type MatchCreateManyInput = {
  id?: number
  player1Id: number
  player2Id: number
  matchedAt?: Date | string
  status?: $Enums.MatchStatus
}

export type MatchUpdateManyMutationInput = {
  matchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMatchStatusFieldUpdateOperationsInput | $Enums.MatchStatus
}

export type MatchUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  player1Id?: Prisma.IntFieldUpdateOperationsInput | number
  player2Id?: Prisma.IntFieldUpdateOperationsInput | number
  matchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMatchStatusFieldUpdateOperationsInput | $Enums.MatchStatus
}

export type MatchListRelationFilter = {
  every?: Prisma.MatchWhereInput
  some?: Prisma.MatchWhereInput
  none?: Prisma.MatchWhereInput
}

export type MatchOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MatchCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  player1Id?: Prisma.SortOrder
  player2Id?: Prisma.SortOrder
  matchedAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type MatchAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  player1Id?: Prisma.SortOrder
  player2Id?: Prisma.SortOrder
}

export type MatchMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  player1Id?: Prisma.SortOrder
  player2Id?: Prisma.SortOrder
  matchedAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type MatchMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  player1Id?: Prisma.SortOrder
  player2Id?: Prisma.SortOrder
  matchedAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type MatchSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  player1Id?: Prisma.SortOrder
  player2Id?: Prisma.SortOrder
}

export type MatchScalarRelationFilter = {
  is?: Prisma.MatchWhereInput
  isNot?: Prisma.MatchWhereInput
}

export type MatchCreateNestedManyWithoutPlayer1Input = {
  create?: Prisma.XOR<Prisma.MatchCreateWithoutPlayer1Input, Prisma.MatchUncheckedCreateWithoutPlayer1Input> | Prisma.MatchCreateWithoutPlayer1Input[] | Prisma.MatchUncheckedCreateWithoutPlayer1Input[]
  connectOrCreate?: Prisma.MatchCreateOrConnectWithoutPlayer1Input | Prisma.MatchCreateOrConnectWithoutPlayer1Input[]
  createMany?: Prisma.MatchCreateManyPlayer1InputEnvelope
  connect?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
}

export type MatchCreateNestedManyWithoutPlayer2Input = {
  create?: Prisma.XOR<Prisma.MatchCreateWithoutPlayer2Input, Prisma.MatchUncheckedCreateWithoutPlayer2Input> | Prisma.MatchCreateWithoutPlayer2Input[] | Prisma.MatchUncheckedCreateWithoutPlayer2Input[]
  connectOrCreate?: Prisma.MatchCreateOrConnectWithoutPlayer2Input | Prisma.MatchCreateOrConnectWithoutPlayer2Input[]
  createMany?: Prisma.MatchCreateManyPlayer2InputEnvelope
  connect?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
}

export type MatchUncheckedCreateNestedManyWithoutPlayer1Input = {
  create?: Prisma.XOR<Prisma.MatchCreateWithoutPlayer1Input, Prisma.MatchUncheckedCreateWithoutPlayer1Input> | Prisma.MatchCreateWithoutPlayer1Input[] | Prisma.MatchUncheckedCreateWithoutPlayer1Input[]
  connectOrCreate?: Prisma.MatchCreateOrConnectWithoutPlayer1Input | Prisma.MatchCreateOrConnectWithoutPlayer1Input[]
  createMany?: Prisma.MatchCreateManyPlayer1InputEnvelope
  connect?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
}

export type MatchUncheckedCreateNestedManyWithoutPlayer2Input = {
  create?: Prisma.XOR<Prisma.MatchCreateWithoutPlayer2Input, Prisma.MatchUncheckedCreateWithoutPlayer2Input> | Prisma.MatchCreateWithoutPlayer2Input[] | Prisma.MatchUncheckedCreateWithoutPlayer2Input[]
  connectOrCreate?: Prisma.MatchCreateOrConnectWithoutPlayer2Input | Prisma.MatchCreateOrConnectWithoutPlayer2Input[]
  createMany?: Prisma.MatchCreateManyPlayer2InputEnvelope
  connect?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
}

export type MatchUpdateManyWithoutPlayer1NestedInput = {
  create?: Prisma.XOR<Prisma.MatchCreateWithoutPlayer1Input, Prisma.MatchUncheckedCreateWithoutPlayer1Input> | Prisma.MatchCreateWithoutPlayer1Input[] | Prisma.MatchUncheckedCreateWithoutPlayer1Input[]
  connectOrCreate?: Prisma.MatchCreateOrConnectWithoutPlayer1Input | Prisma.MatchCreateOrConnectWithoutPlayer1Input[]
  upsert?: Prisma.MatchUpsertWithWhereUniqueWithoutPlayer1Input | Prisma.MatchUpsertWithWhereUniqueWithoutPlayer1Input[]
  createMany?: Prisma.MatchCreateManyPlayer1InputEnvelope
  set?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  disconnect?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  delete?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  connect?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  update?: Prisma.MatchUpdateWithWhereUniqueWithoutPlayer1Input | Prisma.MatchUpdateWithWhereUniqueWithoutPlayer1Input[]
  updateMany?: Prisma.MatchUpdateManyWithWhereWithoutPlayer1Input | Prisma.MatchUpdateManyWithWhereWithoutPlayer1Input[]
  deleteMany?: Prisma.MatchScalarWhereInput | Prisma.MatchScalarWhereInput[]
}

export type MatchUpdateManyWithoutPlayer2NestedInput = {
  create?: Prisma.XOR<Prisma.MatchCreateWithoutPlayer2Input, Prisma.MatchUncheckedCreateWithoutPlayer2Input> | Prisma.MatchCreateWithoutPlayer2Input[] | Prisma.MatchUncheckedCreateWithoutPlayer2Input[]
  connectOrCreate?: Prisma.MatchCreateOrConnectWithoutPlayer2Input | Prisma.MatchCreateOrConnectWithoutPlayer2Input[]
  upsert?: Prisma.MatchUpsertWithWhereUniqueWithoutPlayer2Input | Prisma.MatchUpsertWithWhereUniqueWithoutPlayer2Input[]
  createMany?: Prisma.MatchCreateManyPlayer2InputEnvelope
  set?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  disconnect?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  delete?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  connect?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  update?: Prisma.MatchUpdateWithWhereUniqueWithoutPlayer2Input | Prisma.MatchUpdateWithWhereUniqueWithoutPlayer2Input[]
  updateMany?: Prisma.MatchUpdateManyWithWhereWithoutPlayer2Input | Prisma.MatchUpdateManyWithWhereWithoutPlayer2Input[]
  deleteMany?: Prisma.MatchScalarWhereInput | Prisma.MatchScalarWhereInput[]
}

export type MatchUncheckedUpdateManyWithoutPlayer1NestedInput = {
  create?: Prisma.XOR<Prisma.MatchCreateWithoutPlayer1Input, Prisma.MatchUncheckedCreateWithoutPlayer1Input> | Prisma.MatchCreateWithoutPlayer1Input[] | Prisma.MatchUncheckedCreateWithoutPlayer1Input[]
  connectOrCreate?: Prisma.MatchCreateOrConnectWithoutPlayer1Input | Prisma.MatchCreateOrConnectWithoutPlayer1Input[]
  upsert?: Prisma.MatchUpsertWithWhereUniqueWithoutPlayer1Input | Prisma.MatchUpsertWithWhereUniqueWithoutPlayer1Input[]
  createMany?: Prisma.MatchCreateManyPlayer1InputEnvelope
  set?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  disconnect?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  delete?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  connect?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  update?: Prisma.MatchUpdateWithWhereUniqueWithoutPlayer1Input | Prisma.MatchUpdateWithWhereUniqueWithoutPlayer1Input[]
  updateMany?: Prisma.MatchUpdateManyWithWhereWithoutPlayer1Input | Prisma.MatchUpdateManyWithWhereWithoutPlayer1Input[]
  deleteMany?: Prisma.MatchScalarWhereInput | Prisma.MatchScalarWhereInput[]
}

export type MatchUncheckedUpdateManyWithoutPlayer2NestedInput = {
  create?: Prisma.XOR<Prisma.MatchCreateWithoutPlayer2Input, Prisma.MatchUncheckedCreateWithoutPlayer2Input> | Prisma.MatchCreateWithoutPlayer2Input[] | Prisma.MatchUncheckedCreateWithoutPlayer2Input[]
  connectOrCreate?: Prisma.MatchCreateOrConnectWithoutPlayer2Input | Prisma.MatchCreateOrConnectWithoutPlayer2Input[]
  upsert?: Prisma.MatchUpsertWithWhereUniqueWithoutPlayer2Input | Prisma.MatchUpsertWithWhereUniqueWithoutPlayer2Input[]
  createMany?: Prisma.MatchCreateManyPlayer2InputEnvelope
  set?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  disconnect?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  delete?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  connect?: Prisma.MatchWhereUniqueInput | Prisma.MatchWhereUniqueInput[]
  update?: Prisma.MatchUpdateWithWhereUniqueWithoutPlayer2Input | Prisma.MatchUpdateWithWhereUniqueWithoutPlayer2Input[]
  updateMany?: Prisma.MatchUpdateManyWithWhereWithoutPlayer2Input | Prisma.MatchUpdateManyWithWhereWithoutPlayer2Input[]
  deleteMany?: Prisma.MatchScalarWhereInput | Prisma.MatchScalarWhereInput[]
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type EnumMatchStatusFieldUpdateOperationsInput = {
  set?: $Enums.MatchStatus
}

export type MatchCreateNestedOneWithoutGameInput = {
  create?: Prisma.XOR<Prisma.MatchCreateWithoutGameInput, Prisma.MatchUncheckedCreateWithoutGameInput>
  connectOrCreate?: Prisma.MatchCreateOrConnectWithoutGameInput
  connect?: Prisma.MatchWhereUniqueInput
}

export type MatchUpdateOneRequiredWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.MatchCreateWithoutGameInput, Prisma.MatchUncheckedCreateWithoutGameInput>
  connectOrCreate?: Prisma.MatchCreateOrConnectWithoutGameInput
  upsert?: Prisma.MatchUpsertWithoutGameInput
  connect?: Prisma.MatchWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MatchUpdateToOneWithWhereWithoutGameInput, Prisma.MatchUpdateWithoutGameInput>, Prisma.MatchUncheckedUpdateWithoutGameInput>
}

export type MatchCreateWithoutPlayer1Input = {
  matchedAt?: Date | string
  status?: $Enums.MatchStatus
  player2: Prisma.UserCreateNestedOneWithoutMatches2Input
  game?: Prisma.GameCreateNestedOneWithoutMatchInput
}

export type MatchUncheckedCreateWithoutPlayer1Input = {
  id?: number
  player2Id: number
  matchedAt?: Date | string
  status?: $Enums.MatchStatus
  game?: Prisma.GameUncheckedCreateNestedOneWithoutMatchInput
}

export type MatchCreateOrConnectWithoutPlayer1Input = {
  where: Prisma.MatchWhereUniqueInput
  create: Prisma.XOR<Prisma.MatchCreateWithoutPlayer1Input, Prisma.MatchUncheckedCreateWithoutPlayer1Input>
}

export type MatchCreateManyPlayer1InputEnvelope = {
  data: Prisma.MatchCreateManyPlayer1Input | Prisma.MatchCreateManyPlayer1Input[]
  skipDuplicates?: boolean
}

export type MatchCreateWithoutPlayer2Input = {
  matchedAt?: Date | string
  status?: $Enums.MatchStatus
  player1: Prisma.UserCreateNestedOneWithoutMatches1Input
  game?: Prisma.GameCreateNestedOneWithoutMatchInput
}

export type MatchUncheckedCreateWithoutPlayer2Input = {
  id?: number
  player1Id: number
  matchedAt?: Date | string
  status?: $Enums.MatchStatus
  game?: Prisma.GameUncheckedCreateNestedOneWithoutMatchInput
}

export type MatchCreateOrConnectWithoutPlayer2Input = {
  where: Prisma.MatchWhereUniqueInput
  create: Prisma.XOR<Prisma.MatchCreateWithoutPlayer2Input, Prisma.MatchUncheckedCreateWithoutPlayer2Input>
}

export type MatchCreateManyPlayer2InputEnvelope = {
  data: Prisma.MatchCreateManyPlayer2Input | Prisma.MatchCreateManyPlayer2Input[]
  skipDuplicates?: boolean
}

export type MatchUpsertWithWhereUniqueWithoutPlayer1Input = {
  where: Prisma.MatchWhereUniqueInput
  update: Prisma.XOR<Prisma.MatchUpdateWithoutPlayer1Input, Prisma.MatchUncheckedUpdateWithoutPlayer1Input>
  create: Prisma.XOR<Prisma.MatchCreateWithoutPlayer1Input, Prisma.MatchUncheckedCreateWithoutPlayer1Input>
}

export type MatchUpdateWithWhereUniqueWithoutPlayer1Input = {
  where: Prisma.MatchWhereUniqueInput
  data: Prisma.XOR<Prisma.MatchUpdateWithoutPlayer1Input, Prisma.MatchUncheckedUpdateWithoutPlayer1Input>
}

export type MatchUpdateManyWithWhereWithoutPlayer1Input = {
  where: Prisma.MatchScalarWhereInput
  data: Prisma.XOR<Prisma.MatchUpdateManyMutationInput, Prisma.MatchUncheckedUpdateManyWithoutPlayer1Input>
}

export type MatchScalarWhereInput = {
  AND?: Prisma.MatchScalarWhereInput | Prisma.MatchScalarWhereInput[]
  OR?: Prisma.MatchScalarWhereInput[]
  NOT?: Prisma.MatchScalarWhereInput | Prisma.MatchScalarWhereInput[]
  id?: Prisma.IntFilter<"Match"> | number
  player1Id?: Prisma.IntFilter<"Match"> | number
  player2Id?: Prisma.IntFilter<"Match"> | number
  matchedAt?: Prisma.DateTimeFilter<"Match"> | Date | string
  status?: Prisma.EnumMatchStatusFilter<"Match"> | $Enums.MatchStatus
}

export type MatchUpsertWithWhereUniqueWithoutPlayer2Input = {
  where: Prisma.MatchWhereUniqueInput
  update: Prisma.XOR<Prisma.MatchUpdateWithoutPlayer2Input, Prisma.MatchUncheckedUpdateWithoutPlayer2Input>
  create: Prisma.XOR<Prisma.MatchCreateWithoutPlayer2Input, Prisma.MatchUncheckedCreateWithoutPlayer2Input>
}

export type MatchUpdateWithWhereUniqueWithoutPlayer2Input = {
  where: Prisma.MatchWhereUniqueInput
  data: Prisma.XOR<Prisma.MatchUpdateWithoutPlayer2Input, Prisma.MatchUncheckedUpdateWithoutPlayer2Input>
}

export type MatchUpdateManyWithWhereWithoutPlayer2Input = {
  where: Prisma.MatchScalarWhereInput
  data: Prisma.XOR<Prisma.MatchUpdateManyMutationInput, Prisma.MatchUncheckedUpdateManyWithoutPlayer2Input>
}

export type MatchCreateWithoutGameInput = {
  matchedAt?: Date | string
  status?: $Enums.MatchStatus
  player1: Prisma.UserCreateNestedOneWithoutMatches1Input
  player2: Prisma.UserCreateNestedOneWithoutMatches2Input
}

export type MatchUncheckedCreateWithoutGameInput = {
  id?: number
  player1Id: number
  player2Id: number
  matchedAt?: Date | string
  status?: $Enums.MatchStatus
}

export type MatchCreateOrConnectWithoutGameInput = {
  where: Prisma.MatchWhereUniqueInput
  create: Prisma.XOR<Prisma.MatchCreateWithoutGameInput, Prisma.MatchUncheckedCreateWithoutGameInput>
}

export type MatchUpsertWithoutGameInput = {
  update: Prisma.XOR<Prisma.MatchUpdateWithoutGameInput, Prisma.MatchUncheckedUpdateWithoutGameInput>
  create: Prisma.XOR<Prisma.MatchCreateWithoutGameInput, Prisma.MatchUncheckedCreateWithoutGameInput>
  where?: Prisma.MatchWhereInput
}

export type MatchUpdateToOneWithWhereWithoutGameInput = {
  where?: Prisma.MatchWhereInput
  data: Prisma.XOR<Prisma.MatchUpdateWithoutGameInput, Prisma.MatchUncheckedUpdateWithoutGameInput>
}

export type MatchUpdateWithoutGameInput = {
  matchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMatchStatusFieldUpdateOperationsInput | $Enums.MatchStatus
  player1?: Prisma.UserUpdateOneRequiredWithoutMatches1NestedInput
  player2?: Prisma.UserUpdateOneRequiredWithoutMatches2NestedInput
}

export type MatchUncheckedUpdateWithoutGameInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  player1Id?: Prisma.IntFieldUpdateOperationsInput | number
  player2Id?: Prisma.IntFieldUpdateOperationsInput | number
  matchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMatchStatusFieldUpdateOperationsInput | $Enums.MatchStatus
}

export type MatchCreateManyPlayer1Input = {
  id?: number
  player2Id: number
  matchedAt?: Date | string
  status?: $Enums.MatchStatus
}

export type MatchCreateManyPlayer2Input = {
  id?: number
  player1Id: number
  matchedAt?: Date | string
  status?: $Enums.MatchStatus
}

export type MatchUpdateWithoutPlayer1Input = {
  matchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMatchStatusFieldUpdateOperationsInput | $Enums.MatchStatus
  player2?: Prisma.UserUpdateOneRequiredWithoutMatches2NestedInput
  game?: Prisma.GameUpdateOneWithoutMatchNestedInput
}

export type MatchUncheckedUpdateWithoutPlayer1Input = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  player2Id?: Prisma.IntFieldUpdateOperationsInput | number
  matchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMatchStatusFieldUpdateOperationsInput | $Enums.MatchStatus
  game?: Prisma.GameUncheckedUpdateOneWithoutMatchNestedInput
}

export type MatchUncheckedUpdateManyWithoutPlayer1Input = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  player2Id?: Prisma.IntFieldUpdateOperationsInput | number
  matchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMatchStatusFieldUpdateOperationsInput | $Enums.MatchStatus
}

export type MatchUpdateWithoutPlayer2Input = {
  matchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMatchStatusFieldUpdateOperationsInput | $Enums.MatchStatus
  player1?: Prisma.UserUpdateOneRequiredWithoutMatches1NestedInput
  game?: Prisma.GameUpdateOneWithoutMatchNestedInput
}

export type MatchUncheckedUpdateWithoutPlayer2Input = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  player1Id?: Prisma.IntFieldUpdateOperationsInput | number
  matchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMatchStatusFieldUpdateOperationsInput | $Enums.MatchStatus
  game?: Prisma.GameUncheckedUpdateOneWithoutMatchNestedInput
}

export type MatchUncheckedUpdateManyWithoutPlayer2Input = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  player1Id?: Prisma.IntFieldUpdateOperationsInput | number
  matchedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMatchStatusFieldUpdateOperationsInput | $Enums.MatchStatus
}



export type MatchSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  player1Id?: boolean
  player2Id?: boolean
  matchedAt?: boolean
  status?: boolean
  player1?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  player2?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  game?: boolean | Prisma.Match$gameArgs<ExtArgs>
}, ExtArgs["result"]["match"]>

export type MatchSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  player1Id?: boolean
  player2Id?: boolean
  matchedAt?: boolean
  status?: boolean
  player1?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  player2?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["match"]>

export type MatchSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  player1Id?: boolean
  player2Id?: boolean
  matchedAt?: boolean
  status?: boolean
  player1?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  player2?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["match"]>

export type MatchSelectScalar = {
  id?: boolean
  player1Id?: boolean
  player2Id?: boolean
  matchedAt?: boolean
  status?: boolean
}

export type MatchOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "player1Id" | "player2Id" | "matchedAt" | "status", ExtArgs["result"]["match"]>
export type MatchInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  player1?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  player2?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  game?: boolean | Prisma.Match$gameArgs<ExtArgs>
}
export type MatchIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  player1?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  player2?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MatchIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  player1?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  player2?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $MatchPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Match"
  objects: {
    player1: Prisma.$UserPayload<ExtArgs>
    player2: Prisma.$UserPayload<ExtArgs>
    game: Prisma.$GamePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    player1Id: number
    player2Id: number
    matchedAt: Date
    status: $Enums.MatchStatus
  }, ExtArgs["result"]["match"]>
  composites: {}
}

export type MatchGetPayload<S extends boolean | null | undefined | MatchDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MatchPayload, S>

export type MatchCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MatchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MatchCountAggregateInputType | true
  }

export interface MatchDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Match'], meta: { name: 'Match' } }
  /**
   * Find zero or one Match that matches the filter.
   * @param {MatchFindUniqueArgs} args - Arguments to find a Match
   * @example
   * // Get one Match
   * const match = await prisma.match.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MatchFindUniqueArgs>(args: Prisma.SelectSubset<T, MatchFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MatchClient<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Match that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
   * @example
   * // Get one Match
   * const match = await prisma.match.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MatchClient<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Match that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MatchFindFirstArgs} args - Arguments to find a Match
   * @example
   * // Get one Match
   * const match = await prisma.match.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MatchFindFirstArgs>(args?: Prisma.SelectSubset<T, MatchFindFirstArgs<ExtArgs>>): Prisma.Prisma__MatchClient<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Match that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
   * @example
   * // Get one Match
   * const match = await prisma.match.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MatchFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MatchClient<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Matches that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MatchFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Matches
   * const matches = await prisma.match.findMany()
   * 
   * // Get first 10 Matches
   * const matches = await prisma.match.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MatchFindManyArgs>(args?: Prisma.SelectSubset<T, MatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Match.
   * @param {MatchCreateArgs} args - Arguments to create a Match.
   * @example
   * // Create one Match
   * const Match = await prisma.match.create({
   *   data: {
   *     // ... data to create a Match
   *   }
   * })
   * 
   */
  create<T extends MatchCreateArgs>(args: Prisma.SelectSubset<T, MatchCreateArgs<ExtArgs>>): Prisma.Prisma__MatchClient<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Matches.
   * @param {MatchCreateManyArgs} args - Arguments to create many Matches.
   * @example
   * // Create many Matches
   * const match = await prisma.match.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MatchCreateManyArgs>(args?: Prisma.SelectSubset<T, MatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Matches and returns the data saved in the database.
   * @param {MatchCreateManyAndReturnArgs} args - Arguments to create many Matches.
   * @example
   * // Create many Matches
   * const match = await prisma.match.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Matches and only return the `id`
   * const matchWithIdOnly = await prisma.match.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MatchCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Match.
   * @param {MatchDeleteArgs} args - Arguments to delete one Match.
   * @example
   * // Delete one Match
   * const Match = await prisma.match.delete({
   *   where: {
   *     // ... filter to delete one Match
   *   }
   * })
   * 
   */
  delete<T extends MatchDeleteArgs>(args: Prisma.SelectSubset<T, MatchDeleteArgs<ExtArgs>>): Prisma.Prisma__MatchClient<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Match.
   * @param {MatchUpdateArgs} args - Arguments to update one Match.
   * @example
   * // Update one Match
   * const match = await prisma.match.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MatchUpdateArgs>(args: Prisma.SelectSubset<T, MatchUpdateArgs<ExtArgs>>): Prisma.Prisma__MatchClient<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Matches.
   * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
   * @example
   * // Delete a few Matches
   * const { count } = await prisma.match.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MatchDeleteManyArgs>(args?: Prisma.SelectSubset<T, MatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Matches.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Matches
   * const match = await prisma.match.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MatchUpdateManyArgs>(args: Prisma.SelectSubset<T, MatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Matches and returns the data updated in the database.
   * @param {MatchUpdateManyAndReturnArgs} args - Arguments to update many Matches.
   * @example
   * // Update many Matches
   * const match = await prisma.match.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Matches and only return the `id`
   * const matchWithIdOnly = await prisma.match.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MatchUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MatchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Match.
   * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
   * @example
   * // Update or create a Match
   * const match = await prisma.match.upsert({
   *   create: {
   *     // ... data to create a Match
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Match we want to update
   *   }
   * })
   */
  upsert<T extends MatchUpsertArgs>(args: Prisma.SelectSubset<T, MatchUpsertArgs<ExtArgs>>): Prisma.Prisma__MatchClient<runtime.Types.Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Matches.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MatchCountArgs} args - Arguments to filter Matches to count.
   * @example
   * // Count the number of Matches
   * const count = await prisma.match.count({
   *   where: {
   *     // ... the filter for the Matches we want to count
   *   }
   * })
  **/
  count<T extends MatchCountArgs>(
    args?: Prisma.Subset<T, MatchCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MatchCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Match.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MatchAggregateArgs>(args: Prisma.Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

  /**
   * Group by Match.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MatchGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MatchGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MatchGroupByArgs['orderBy'] }
      : { orderBy?: MatchGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Match model
 */
readonly fields: MatchFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Match.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MatchClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  player1<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  player2<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  game<T extends Prisma.Match$gameArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Match$gameArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Match model
 */
export interface MatchFieldRefs {
  readonly id: Prisma.FieldRef<"Match", 'Int'>
  readonly player1Id: Prisma.FieldRef<"Match", 'Int'>
  readonly player2Id: Prisma.FieldRef<"Match", 'Int'>
  readonly matchedAt: Prisma.FieldRef<"Match", 'DateTime'>
  readonly status: Prisma.FieldRef<"Match", 'MatchStatus'>
}
    

// Custom InputTypes
/**
 * Match findUnique
 */
export type MatchFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Match
   */
  select?: Prisma.MatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Match
   */
  omit?: Prisma.MatchOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatchInclude<ExtArgs> | null
  /**
   * Filter, which Match to fetch.
   */
  where: Prisma.MatchWhereUniqueInput
}

/**
 * Match findUniqueOrThrow
 */
export type MatchFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Match
   */
  select?: Prisma.MatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Match
   */
  omit?: Prisma.MatchOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatchInclude<ExtArgs> | null
  /**
   * Filter, which Match to fetch.
   */
  where: Prisma.MatchWhereUniqueInput
}

/**
 * Match findFirst
 */
export type MatchFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Match
   */
  select?: Prisma.MatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Match
   */
  omit?: Prisma.MatchOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatchInclude<ExtArgs> | null
  /**
   * Filter, which Match to fetch.
   */
  where?: Prisma.MatchWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Matches to fetch.
   */
  orderBy?: Prisma.MatchOrderByWithRelationInput | Prisma.MatchOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Matches.
   */
  cursor?: Prisma.MatchWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Matches from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Matches.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Matches.
   */
  distinct?: Prisma.MatchScalarFieldEnum | Prisma.MatchScalarFieldEnum[]
}

/**
 * Match findFirstOrThrow
 */
export type MatchFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Match
   */
  select?: Prisma.MatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Match
   */
  omit?: Prisma.MatchOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatchInclude<ExtArgs> | null
  /**
   * Filter, which Match to fetch.
   */
  where?: Prisma.MatchWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Matches to fetch.
   */
  orderBy?: Prisma.MatchOrderByWithRelationInput | Prisma.MatchOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Matches.
   */
  cursor?: Prisma.MatchWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Matches from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Matches.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Matches.
   */
  distinct?: Prisma.MatchScalarFieldEnum | Prisma.MatchScalarFieldEnum[]
}

/**
 * Match findMany
 */
export type MatchFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Match
   */
  select?: Prisma.MatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Match
   */
  omit?: Prisma.MatchOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatchInclude<ExtArgs> | null
  /**
   * Filter, which Matches to fetch.
   */
  where?: Prisma.MatchWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Matches to fetch.
   */
  orderBy?: Prisma.MatchOrderByWithRelationInput | Prisma.MatchOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Matches.
   */
  cursor?: Prisma.MatchWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Matches from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Matches.
   */
  skip?: number
  distinct?: Prisma.MatchScalarFieldEnum | Prisma.MatchScalarFieldEnum[]
}

/**
 * Match create
 */
export type MatchCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Match
   */
  select?: Prisma.MatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Match
   */
  omit?: Prisma.MatchOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatchInclude<ExtArgs> | null
  /**
   * The data needed to create a Match.
   */
  data: Prisma.XOR<Prisma.MatchCreateInput, Prisma.MatchUncheckedCreateInput>
}

/**
 * Match createMany
 */
export type MatchCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Matches.
   */
  data: Prisma.MatchCreateManyInput | Prisma.MatchCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Match createManyAndReturn
 */
export type MatchCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Match
   */
  select?: Prisma.MatchSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Match
   */
  omit?: Prisma.MatchOmit<ExtArgs> | null
  /**
   * The data used to create many Matches.
   */
  data: Prisma.MatchCreateManyInput | Prisma.MatchCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatchIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Match update
 */
export type MatchUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Match
   */
  select?: Prisma.MatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Match
   */
  omit?: Prisma.MatchOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatchInclude<ExtArgs> | null
  /**
   * The data needed to update a Match.
   */
  data: Prisma.XOR<Prisma.MatchUpdateInput, Prisma.MatchUncheckedUpdateInput>
  /**
   * Choose, which Match to update.
   */
  where: Prisma.MatchWhereUniqueInput
}

/**
 * Match updateMany
 */
export type MatchUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Matches.
   */
  data: Prisma.XOR<Prisma.MatchUpdateManyMutationInput, Prisma.MatchUncheckedUpdateManyInput>
  /**
   * Filter which Matches to update
   */
  where?: Prisma.MatchWhereInput
  /**
   * Limit how many Matches to update.
   */
  limit?: number
}

/**
 * Match updateManyAndReturn
 */
export type MatchUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Match
   */
  select?: Prisma.MatchSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Match
   */
  omit?: Prisma.MatchOmit<ExtArgs> | null
  /**
   * The data used to update Matches.
   */
  data: Prisma.XOR<Prisma.MatchUpdateManyMutationInput, Prisma.MatchUncheckedUpdateManyInput>
  /**
   * Filter which Matches to update
   */
  where?: Prisma.MatchWhereInput
  /**
   * Limit how many Matches to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatchIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Match upsert
 */
export type MatchUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Match
   */
  select?: Prisma.MatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Match
   */
  omit?: Prisma.MatchOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatchInclude<ExtArgs> | null
  /**
   * The filter to search for the Match to update in case it exists.
   */
  where: Prisma.MatchWhereUniqueInput
  /**
   * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
   */
  create: Prisma.XOR<Prisma.MatchCreateInput, Prisma.MatchUncheckedCreateInput>
  /**
   * In case the Match was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MatchUpdateInput, Prisma.MatchUncheckedUpdateInput>
}

/**
 * Match delete
 */
export type MatchDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Match
   */
  select?: Prisma.MatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Match
   */
  omit?: Prisma.MatchOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatchInclude<ExtArgs> | null
  /**
   * Filter which Match to delete.
   */
  where: Prisma.MatchWhereUniqueInput
}

/**
 * Match deleteMany
 */
export type MatchDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Matches to delete
   */
  where?: Prisma.MatchWhereInput
  /**
   * Limit how many Matches to delete.
   */
  limit?: number
}

/**
 * Match.game
 */
export type Match$gameArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Game
   */
  select?: Prisma.GameSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Game
   */
  omit?: Prisma.GameOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameInclude<ExtArgs> | null
  where?: Prisma.GameWhereInput
}

/**
 * Match without action
 */
export type MatchDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Match
   */
  select?: Prisma.MatchSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Match
   */
  omit?: Prisma.MatchOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MatchInclude<ExtArgs> | null
}
